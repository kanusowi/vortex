syntax = "proto3";

package vortex.api.v1;

import "google/protobuf/struct.proto";

option go_package = "github.com/vortex-db/vortex/proto/vortex/api/v1;vortex_api_v1";
option java_package = "io.vortexdb.api.v1";
option java_multiple_files = true;
option java_outer_classname = "CommonProto";

// Represents a dense vector.
message Vector {
  repeated float elements = 1;
}

// Represents a payload, which is a map of string keys to arbitrary JSON-like values.
// Uses google.protobuf.Value for flexibility.
message Payload {
  map<string, google.protobuf.Value> fields = 1;
}

// Represents a single point (vector with ID and optional payload).
message PointStruct {
  string id = 1;
  Vector vector = 2;
  optional Payload payload = 3;
}

// Represents a point returned from a search query, including its score.
message ScoredPoint {
  string id = 1;
  optional Vector vector = 2;
  optional Payload payload = 3;
  float score = 4;
  optional uint64 version = 5; // Version of the point, e.g., for optimistic concurrency.
}

// Represents a filter for querying points.
// Initially simple, will be expanded for advanced filtering.
message Filter {
  // Points must match all these key-value pairs exactly.
  map<string, google.protobuf.Value> must_match_exact = 1;
  // TODO: Add 'should_match_exact', 'must_not_match_exact', range filters, geo filters etc. in Epic 1.4.2
}

// HNSW configuration parameters.
message HnswConfigParams {
  uint32 m = 1;                 // Number of connections per node.
  uint32 ef_construction = 2;   // Size of the dynamic list for HNSW construction.
  uint32 ef_search = 3;         // Size of the dynamic list for HNSW search.
  double ml = 4;                // Normalization factor for level generation.
  optional uint64 seed = 5;     // Seed for random number generation (optional).
  uint32 vector_dim = 6;        // Dimensionality of the vectors.
  uint32 m_max0 = 7;            // Max connections for layer 0.
}

// Distance metric for comparing vectors.
enum DistanceMetric {
  DISTANCE_METRIC_UNSPECIFIED = 0;
  COSINE = 1;
  EUCLIDEAN_L2 = 2;
  // TODO: Add DOT_PRODUCT if needed.
}

// Parameters for search operations.
message SearchParams {
  optional uint32 ef_search = 1; // Overrides collection's ef_search if set.
  // TODO: Add params for quantization, consistency etc. later.
}

// Status of an operation on a single point.
message PointOperationStatus {
  string point_id = 1;
  StatusCode status_code = 2;
  optional string error_message = 3;
}

// General status codes for operations.
enum StatusCode {
  STATUS_CODE_UNSPECIFIED = 0;
  OK = 1;
  ERROR = 2;
  NOT_FOUND = 3;
  INVALID_ARGUMENT = 4;
  // Add more specific error codes as needed.
}
