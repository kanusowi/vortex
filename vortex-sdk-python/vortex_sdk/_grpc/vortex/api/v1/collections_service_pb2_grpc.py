# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import collections_service_pb2 as vortex_dot_api_dot_v1_dot_collections__service__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in vortex/api/v1/collections_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CollectionsServiceStub(object):
    """Service for managing collections (indices).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCollection = channel.unary_unary(
                '/vortex.api.v1.CollectionsService/CreateCollection',
                request_serializer=vortex_dot_api_dot_v1_dot_collections__service__pb2.CreateCollectionRequest.SerializeToString,
                response_deserializer=vortex_dot_api_dot_v1_dot_collections__service__pb2.CreateCollectionResponse.FromString,
                _registered_method=True)
        self.GetCollectionInfo = channel.unary_unary(
                '/vortex.api.v1.CollectionsService/GetCollectionInfo',
                request_serializer=vortex_dot_api_dot_v1_dot_collections__service__pb2.GetCollectionInfoRequest.SerializeToString,
                response_deserializer=vortex_dot_api_dot_v1_dot_collections__service__pb2.GetCollectionInfoResponse.FromString,
                _registered_method=True)
        self.ListCollections = channel.unary_unary(
                '/vortex.api.v1.CollectionsService/ListCollections',
                request_serializer=vortex_dot_api_dot_v1_dot_collections__service__pb2.ListCollectionsRequest.SerializeToString,
                response_deserializer=vortex_dot_api_dot_v1_dot_collections__service__pb2.ListCollectionsResponse.FromString,
                _registered_method=True)
        self.DeleteCollection = channel.unary_unary(
                '/vortex.api.v1.CollectionsService/DeleteCollection',
                request_serializer=vortex_dot_api_dot_v1_dot_collections__service__pb2.DeleteCollectionRequest.SerializeToString,
                response_deserializer=vortex_dot_api_dot_v1_dot_collections__service__pb2.DeleteCollectionResponse.FromString,
                _registered_method=True)


class CollectionsServiceServicer(object):
    """Service for managing collections (indices).
    """

    def CreateCollection(self, request, context):
        """Creates a new collection.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCollectionInfo(self, request, context):
        """Gets detailed information about a collection.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCollections(self, request, context):
        """Lists all available collections.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCollection(self, request, context):
        """Deletes a collection and all its data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CollectionsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCollection,
                    request_deserializer=vortex_dot_api_dot_v1_dot_collections__service__pb2.CreateCollectionRequest.FromString,
                    response_serializer=vortex_dot_api_dot_v1_dot_collections__service__pb2.CreateCollectionResponse.SerializeToString,
            ),
            'GetCollectionInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCollectionInfo,
                    request_deserializer=vortex_dot_api_dot_v1_dot_collections__service__pb2.GetCollectionInfoRequest.FromString,
                    response_serializer=vortex_dot_api_dot_v1_dot_collections__service__pb2.GetCollectionInfoResponse.SerializeToString,
            ),
            'ListCollections': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCollections,
                    request_deserializer=vortex_dot_api_dot_v1_dot_collections__service__pb2.ListCollectionsRequest.FromString,
                    response_serializer=vortex_dot_api_dot_v1_dot_collections__service__pb2.ListCollectionsResponse.SerializeToString,
            ),
            'DeleteCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCollection,
                    request_deserializer=vortex_dot_api_dot_v1_dot_collections__service__pb2.DeleteCollectionRequest.FromString,
                    response_serializer=vortex_dot_api_dot_v1_dot_collections__service__pb2.DeleteCollectionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vortex.api.v1.CollectionsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('vortex.api.v1.CollectionsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CollectionsService(object):
    """Service for managing collections (indices).
    """

    @staticmethod
    def CreateCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vortex.api.v1.CollectionsService/CreateCollection',
            vortex_dot_api_dot_v1_dot_collections__service__pb2.CreateCollectionRequest.SerializeToString,
            vortex_dot_api_dot_v1_dot_collections__service__pb2.CreateCollectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCollectionInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vortex.api.v1.CollectionsService/GetCollectionInfo',
            vortex_dot_api_dot_v1_dot_collections__service__pb2.GetCollectionInfoRequest.SerializeToString,
            vortex_dot_api_dot_v1_dot_collections__service__pb2.GetCollectionInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCollections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vortex.api.v1.CollectionsService/ListCollections',
            vortex_dot_api_dot_v1_dot_collections__service__pb2.ListCollectionsRequest.SerializeToString,
            vortex_dot_api_dot_v1_dot_collections__service__pb2.ListCollectionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vortex.api.v1.CollectionsService/DeleteCollection',
            vortex_dot_api_dot_v1_dot_collections__service__pb2.DeleteCollectionRequest.SerializeToString,
            vortex_dot_api_dot_v1_dot_collections__service__pb2.DeleteCollectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
