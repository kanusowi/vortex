// source: vortex/api/v1/common.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
goog.exportSymbol('proto.vortex.api.v1.DistanceMetric', null, global);
goog.exportSymbol('proto.vortex.api.v1.Filter', null, global);
goog.exportSymbol('proto.vortex.api.v1.HnswConfigParams', null, global);
goog.exportSymbol('proto.vortex.api.v1.Payload', null, global);
goog.exportSymbol('proto.vortex.api.v1.PointOperationStatus', null, global);
goog.exportSymbol('proto.vortex.api.v1.PointStruct', null, global);
goog.exportSymbol('proto.vortex.api.v1.ScoredPoint', null, global);
goog.exportSymbol('proto.vortex.api.v1.SearchParams', null, global);
goog.exportSymbol('proto.vortex.api.v1.StatusCode', null, global);
goog.exportSymbol('proto.vortex.api.v1.Vector', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.Vector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vortex.api.v1.Vector.repeatedFields_, null);
};
goog.inherits(proto.vortex.api.v1.Vector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.Vector.displayName = 'proto.vortex.api.v1.Vector';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.Payload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vortex.api.v1.Payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.Payload.displayName = 'proto.vortex.api.v1.Payload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.PointStruct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vortex.api.v1.PointStruct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.PointStruct.displayName = 'proto.vortex.api.v1.PointStruct';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.ScoredPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vortex.api.v1.ScoredPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.ScoredPoint.displayName = 'proto.vortex.api.v1.ScoredPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vortex.api.v1.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.Filter.displayName = 'proto.vortex.api.v1.Filter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.HnswConfigParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vortex.api.v1.HnswConfigParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.HnswConfigParams.displayName = 'proto.vortex.api.v1.HnswConfigParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.SearchParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vortex.api.v1.SearchParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.SearchParams.displayName = 'proto.vortex.api.v1.SearchParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.PointOperationStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vortex.api.v1.PointOperationStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.PointOperationStatus.displayName = 'proto.vortex.api.v1.PointOperationStatus';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vortex.api.v1.Vector.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.Vector.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.Vector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.Vector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.Vector.toObject = function(includeInstance, msg) {
  var f, obj = {
    elementsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.Vector}
 */
proto.vortex.api.v1.Vector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.Vector;
  return proto.vortex.api.v1.Vector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.Vector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.Vector}
 */
proto.vortex.api.v1.Vector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addElements(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.Vector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.Vector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.Vector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.Vector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElementsList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
};


/**
 * repeated float elements = 1;
 * @return {!Array<number>}
 */
proto.vortex.api.v1.Vector.prototype.getElementsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.vortex.api.v1.Vector} returns this
 */
proto.vortex.api.v1.Vector.prototype.setElementsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.vortex.api.v1.Vector} returns this
 */
proto.vortex.api.v1.Vector.prototype.addElements = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vortex.api.v1.Vector} returns this
 */
proto.vortex.api.v1.Vector.prototype.clearElementsList = function() {
  return this.setElementsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.Payload.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.Payload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.Payload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.Payload.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldsMap: (f = msg.getFieldsMap()) ? f.toObject(includeInstance, proto.google.protobuf.Value.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.Payload}
 */
proto.vortex.api.v1.Payload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.Payload;
  return proto.vortex.api.v1.Payload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.Payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.Payload}
 */
proto.vortex.api.v1.Payload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getFieldsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Value.deserializeBinaryFromReader, "", new proto.google.protobuf.Value());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.Payload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.Payload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.Payload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.Payload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Value.serializeBinaryToWriter);
  }
};


/**
 * map<string, google.protobuf.Value> fields = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Value>}
 */
proto.vortex.api.v1.Payload.prototype.getFieldsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Value>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.google.protobuf.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.vortex.api.v1.Payload} returns this
 */
proto.vortex.api.v1.Payload.prototype.clearFieldsMap = function() {
  this.getFieldsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.PointStruct.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.PointStruct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.PointStruct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.PointStruct.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vector: (f = msg.getVector()) && proto.vortex.api.v1.Vector.toObject(includeInstance, f),
    payload: (f = msg.getPayload()) && proto.vortex.api.v1.Payload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.PointStruct}
 */
proto.vortex.api.v1.PointStruct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.PointStruct;
  return proto.vortex.api.v1.PointStruct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.PointStruct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.PointStruct}
 */
proto.vortex.api.v1.PointStruct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.vortex.api.v1.Vector;
      reader.readMessage(value,proto.vortex.api.v1.Vector.deserializeBinaryFromReader);
      msg.setVector(value);
      break;
    case 3:
      var value = new proto.vortex.api.v1.Payload;
      reader.readMessage(value,proto.vortex.api.v1.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.PointStruct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.PointStruct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.PointStruct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.PointStruct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVector();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vortex.api.v1.Vector.serializeBinaryToWriter
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.vortex.api.v1.Payload.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.vortex.api.v1.PointStruct.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vortex.api.v1.PointStruct} returns this
 */
proto.vortex.api.v1.PointStruct.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Vector vector = 2;
 * @return {?proto.vortex.api.v1.Vector}
 */
proto.vortex.api.v1.PointStruct.prototype.getVector = function() {
  return /** @type{?proto.vortex.api.v1.Vector} */ (
    jspb.Message.getWrapperField(this, proto.vortex.api.v1.Vector, 2));
};


/**
 * @param {?proto.vortex.api.v1.Vector|undefined} value
 * @return {!proto.vortex.api.v1.PointStruct} returns this
*/
proto.vortex.api.v1.PointStruct.prototype.setVector = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vortex.api.v1.PointStruct} returns this
 */
proto.vortex.api.v1.PointStruct.prototype.clearVector = function() {
  return this.setVector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vortex.api.v1.PointStruct.prototype.hasVector = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Payload payload = 3;
 * @return {?proto.vortex.api.v1.Payload}
 */
proto.vortex.api.v1.PointStruct.prototype.getPayload = function() {
  return /** @type{?proto.vortex.api.v1.Payload} */ (
    jspb.Message.getWrapperField(this, proto.vortex.api.v1.Payload, 3));
};


/**
 * @param {?proto.vortex.api.v1.Payload|undefined} value
 * @return {!proto.vortex.api.v1.PointStruct} returns this
*/
proto.vortex.api.v1.PointStruct.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vortex.api.v1.PointStruct} returns this
 */
proto.vortex.api.v1.PointStruct.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vortex.api.v1.PointStruct.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.ScoredPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.ScoredPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.ScoredPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.ScoredPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vector: (f = msg.getVector()) && proto.vortex.api.v1.Vector.toObject(includeInstance, f),
    payload: (f = msg.getPayload()) && proto.vortex.api.v1.Payload.toObject(includeInstance, f),
    score: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    version: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.ScoredPoint}
 */
proto.vortex.api.v1.ScoredPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.ScoredPoint;
  return proto.vortex.api.v1.ScoredPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.ScoredPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.ScoredPoint}
 */
proto.vortex.api.v1.ScoredPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.vortex.api.v1.Vector;
      reader.readMessage(value,proto.vortex.api.v1.Vector.deserializeBinaryFromReader);
      msg.setVector(value);
      break;
    case 3:
      var value = new proto.vortex.api.v1.Payload;
      reader.readMessage(value,proto.vortex.api.v1.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScore(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.ScoredPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.ScoredPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.ScoredPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.ScoredPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVector();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vortex.api.v1.Vector.serializeBinaryToWriter
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.vortex.api.v1.Payload.serializeBinaryToWriter
    );
  }
  f = message.getScore();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.vortex.api.v1.ScoredPoint.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vortex.api.v1.ScoredPoint} returns this
 */
proto.vortex.api.v1.ScoredPoint.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Vector vector = 2;
 * @return {?proto.vortex.api.v1.Vector}
 */
proto.vortex.api.v1.ScoredPoint.prototype.getVector = function() {
  return /** @type{?proto.vortex.api.v1.Vector} */ (
    jspb.Message.getWrapperField(this, proto.vortex.api.v1.Vector, 2));
};


/**
 * @param {?proto.vortex.api.v1.Vector|undefined} value
 * @return {!proto.vortex.api.v1.ScoredPoint} returns this
*/
proto.vortex.api.v1.ScoredPoint.prototype.setVector = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vortex.api.v1.ScoredPoint} returns this
 */
proto.vortex.api.v1.ScoredPoint.prototype.clearVector = function() {
  return this.setVector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vortex.api.v1.ScoredPoint.prototype.hasVector = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Payload payload = 3;
 * @return {?proto.vortex.api.v1.Payload}
 */
proto.vortex.api.v1.ScoredPoint.prototype.getPayload = function() {
  return /** @type{?proto.vortex.api.v1.Payload} */ (
    jspb.Message.getWrapperField(this, proto.vortex.api.v1.Payload, 3));
};


/**
 * @param {?proto.vortex.api.v1.Payload|undefined} value
 * @return {!proto.vortex.api.v1.ScoredPoint} returns this
*/
proto.vortex.api.v1.ScoredPoint.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vortex.api.v1.ScoredPoint} returns this
 */
proto.vortex.api.v1.ScoredPoint.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vortex.api.v1.ScoredPoint.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float score = 4;
 * @return {number}
 */
proto.vortex.api.v1.ScoredPoint.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vortex.api.v1.ScoredPoint} returns this
 */
proto.vortex.api.v1.ScoredPoint.prototype.setScore = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional uint64 version = 5;
 * @return {number}
 */
proto.vortex.api.v1.ScoredPoint.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.vortex.api.v1.ScoredPoint} returns this
 */
proto.vortex.api.v1.ScoredPoint.prototype.setVersion = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vortex.api.v1.ScoredPoint} returns this
 */
proto.vortex.api.v1.ScoredPoint.prototype.clearVersion = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vortex.api.v1.ScoredPoint.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    mustMatchExactMap: (f = msg.getMustMatchExactMap()) ? f.toObject(includeInstance, proto.google.protobuf.Value.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.Filter}
 */
proto.vortex.api.v1.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.Filter;
  return proto.vortex.api.v1.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.Filter}
 */
proto.vortex.api.v1.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMustMatchExactMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Value.deserializeBinaryFromReader, "", new proto.google.protobuf.Value());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMustMatchExactMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Value.serializeBinaryToWriter);
  }
};


/**
 * map<string, google.protobuf.Value> must_match_exact = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Value>}
 */
proto.vortex.api.v1.Filter.prototype.getMustMatchExactMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Value>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.google.protobuf.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.vortex.api.v1.Filter} returns this
 */
proto.vortex.api.v1.Filter.prototype.clearMustMatchExactMap = function() {
  this.getMustMatchExactMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.HnswConfigParams.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.HnswConfigParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.HnswConfigParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.HnswConfigParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    m: jspb.Message.getFieldWithDefault(msg, 1, 0),
    efConstruction: jspb.Message.getFieldWithDefault(msg, 2, 0),
    efSearch: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ml: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    seed: jspb.Message.getFieldWithDefault(msg, 5, 0),
    vectorDim: jspb.Message.getFieldWithDefault(msg, 6, 0),
    mMax0: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.HnswConfigParams}
 */
proto.vortex.api.v1.HnswConfigParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.HnswConfigParams;
  return proto.vortex.api.v1.HnswConfigParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.HnswConfigParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.HnswConfigParams}
 */
proto.vortex.api.v1.HnswConfigParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setM(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEfConstruction(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEfSearch(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMl(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeed(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVectorDim(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMMax0(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.HnswConfigParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.HnswConfigParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.HnswConfigParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.HnswConfigParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getM();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEfConstruction();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getEfSearch();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMl();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getVectorDim();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getMMax0();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional uint32 m = 1;
 * @return {number}
 */
proto.vortex.api.v1.HnswConfigParams.prototype.getM = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vortex.api.v1.HnswConfigParams} returns this
 */
proto.vortex.api.v1.HnswConfigParams.prototype.setM = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 ef_construction = 2;
 * @return {number}
 */
proto.vortex.api.v1.HnswConfigParams.prototype.getEfConstruction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vortex.api.v1.HnswConfigParams} returns this
 */
proto.vortex.api.v1.HnswConfigParams.prototype.setEfConstruction = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 ef_search = 3;
 * @return {number}
 */
proto.vortex.api.v1.HnswConfigParams.prototype.getEfSearch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.vortex.api.v1.HnswConfigParams} returns this
 */
proto.vortex.api.v1.HnswConfigParams.prototype.setEfSearch = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional double ml = 4;
 * @return {number}
 */
proto.vortex.api.v1.HnswConfigParams.prototype.getMl = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vortex.api.v1.HnswConfigParams} returns this
 */
proto.vortex.api.v1.HnswConfigParams.prototype.setMl = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional uint64 seed = 5;
 * @return {number}
 */
proto.vortex.api.v1.HnswConfigParams.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.vortex.api.v1.HnswConfigParams} returns this
 */
proto.vortex.api.v1.HnswConfigParams.prototype.setSeed = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vortex.api.v1.HnswConfigParams} returns this
 */
proto.vortex.api.v1.HnswConfigParams.prototype.clearSeed = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vortex.api.v1.HnswConfigParams.prototype.hasSeed = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 vector_dim = 6;
 * @return {number}
 */
proto.vortex.api.v1.HnswConfigParams.prototype.getVectorDim = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.vortex.api.v1.HnswConfigParams} returns this
 */
proto.vortex.api.v1.HnswConfigParams.prototype.setVectorDim = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 m_max0 = 7;
 * @return {number}
 */
proto.vortex.api.v1.HnswConfigParams.prototype.getMMax0 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.vortex.api.v1.HnswConfigParams} returns this
 */
proto.vortex.api.v1.HnswConfigParams.prototype.setMMax0 = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.SearchParams.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.SearchParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.SearchParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.SearchParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    efSearch: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.SearchParams}
 */
proto.vortex.api.v1.SearchParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.SearchParams;
  return proto.vortex.api.v1.SearchParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.SearchParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.SearchParams}
 */
proto.vortex.api.v1.SearchParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEfSearch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.SearchParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.SearchParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.SearchParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.SearchParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 ef_search = 1;
 * @return {number}
 */
proto.vortex.api.v1.SearchParams.prototype.getEfSearch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vortex.api.v1.SearchParams} returns this
 */
proto.vortex.api.v1.SearchParams.prototype.setEfSearch = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vortex.api.v1.SearchParams} returns this
 */
proto.vortex.api.v1.SearchParams.prototype.clearEfSearch = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vortex.api.v1.SearchParams.prototype.hasEfSearch = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.PointOperationStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.PointOperationStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.PointOperationStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.PointOperationStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    statusCode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errorMessage: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.PointOperationStatus}
 */
proto.vortex.api.v1.PointOperationStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.PointOperationStatus;
  return proto.vortex.api.v1.PointOperationStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.PointOperationStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.PointOperationStatus}
 */
proto.vortex.api.v1.PointOperationStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPointId(value);
      break;
    case 2:
      var value = /** @type {!proto.vortex.api.v1.StatusCode} */ (reader.readEnum());
      msg.setStatusCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.PointOperationStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.PointOperationStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.PointOperationStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.PointOperationStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatusCode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string point_id = 1;
 * @return {string}
 */
proto.vortex.api.v1.PointOperationStatus.prototype.getPointId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vortex.api.v1.PointOperationStatus} returns this
 */
proto.vortex.api.v1.PointOperationStatus.prototype.setPointId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional StatusCode status_code = 2;
 * @return {!proto.vortex.api.v1.StatusCode}
 */
proto.vortex.api.v1.PointOperationStatus.prototype.getStatusCode = function() {
  return /** @type {!proto.vortex.api.v1.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.vortex.api.v1.StatusCode} value
 * @return {!proto.vortex.api.v1.PointOperationStatus} returns this
 */
proto.vortex.api.v1.PointOperationStatus.prototype.setStatusCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string error_message = 3;
 * @return {string}
 */
proto.vortex.api.v1.PointOperationStatus.prototype.getErrorMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vortex.api.v1.PointOperationStatus} returns this
 */
proto.vortex.api.v1.PointOperationStatus.prototype.setErrorMessage = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vortex.api.v1.PointOperationStatus} returns this
 */
proto.vortex.api.v1.PointOperationStatus.prototype.clearErrorMessage = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vortex.api.v1.PointOperationStatus.prototype.hasErrorMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.vortex.api.v1.DistanceMetric = {
  DISTANCE_METRIC_UNSPECIFIED: 0,
  COSINE: 1,
  EUCLIDEAN_L2: 2
};

/**
 * @enum {number}
 */
proto.vortex.api.v1.StatusCode = {
  STATUS_CODE_UNSPECIFIED: 0,
  OK: 1,
  ERROR: 2,
  NOT_FOUND: 3,
  INVALID_ARGUMENT: 4
};

goog.object.extend(exports, proto.vortex.api.v1);
