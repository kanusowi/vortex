// source: vortex/api/v1/collections_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var vortex_api_v1_common_pb = require('../../../vortex/api/v1/common_pb.js');
goog.object.extend(proto, vortex_api_v1_common_pb);
goog.exportSymbol('proto.vortex.api.v1.CollectionDescription', null, global);
goog.exportSymbol('proto.vortex.api.v1.CollectionStatus', null, global);
goog.exportSymbol('proto.vortex.api.v1.CreateCollectionRequest', null, global);
goog.exportSymbol('proto.vortex.api.v1.CreateCollectionResponse', null, global);
goog.exportSymbol('proto.vortex.api.v1.DeleteCollectionRequest', null, global);
goog.exportSymbol('proto.vortex.api.v1.DeleteCollectionResponse', null, global);
goog.exportSymbol('proto.vortex.api.v1.GetCollectionInfoRequest', null, global);
goog.exportSymbol('proto.vortex.api.v1.GetCollectionInfoResponse', null, global);
goog.exportSymbol('proto.vortex.api.v1.ListCollectionsRequest', null, global);
goog.exportSymbol('proto.vortex.api.v1.ListCollectionsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.CreateCollectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vortex.api.v1.CreateCollectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.CreateCollectionRequest.displayName = 'proto.vortex.api.v1.CreateCollectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.CreateCollectionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vortex.api.v1.CreateCollectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.CreateCollectionResponse.displayName = 'proto.vortex.api.v1.CreateCollectionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.GetCollectionInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vortex.api.v1.GetCollectionInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.GetCollectionInfoRequest.displayName = 'proto.vortex.api.v1.GetCollectionInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.GetCollectionInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vortex.api.v1.GetCollectionInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.GetCollectionInfoResponse.displayName = 'proto.vortex.api.v1.GetCollectionInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.ListCollectionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vortex.api.v1.ListCollectionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.ListCollectionsRequest.displayName = 'proto.vortex.api.v1.ListCollectionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.ListCollectionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vortex.api.v1.ListCollectionsResponse.repeatedFields_, null);
};
goog.inherits(proto.vortex.api.v1.ListCollectionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.ListCollectionsResponse.displayName = 'proto.vortex.api.v1.ListCollectionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.CollectionDescription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vortex.api.v1.CollectionDescription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.CollectionDescription.displayName = 'proto.vortex.api.v1.CollectionDescription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.DeleteCollectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vortex.api.v1.DeleteCollectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.DeleteCollectionRequest.displayName = 'proto.vortex.api.v1.DeleteCollectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.DeleteCollectionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vortex.api.v1.DeleteCollectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.DeleteCollectionResponse.displayName = 'proto.vortex.api.v1.DeleteCollectionResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.CreateCollectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.CreateCollectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.CreateCollectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.CreateCollectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vectorDimensions: jspb.Message.getFieldWithDefault(msg, 2, 0),
    distanceMetric: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hnswConfig: (f = msg.getHnswConfig()) && vortex_api_v1_common_pb.HnswConfigParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.CreateCollectionRequest}
 */
proto.vortex.api.v1.CreateCollectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.CreateCollectionRequest;
  return proto.vortex.api.v1.CreateCollectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.CreateCollectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.CreateCollectionRequest}
 */
proto.vortex.api.v1.CreateCollectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVectorDimensions(value);
      break;
    case 3:
      var value = /** @type {!proto.vortex.api.v1.DistanceMetric} */ (reader.readEnum());
      msg.setDistanceMetric(value);
      break;
    case 4:
      var value = new vortex_api_v1_common_pb.HnswConfigParams;
      reader.readMessage(value,vortex_api_v1_common_pb.HnswConfigParams.deserializeBinaryFromReader);
      msg.setHnswConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.CreateCollectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.CreateCollectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.CreateCollectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.CreateCollectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVectorDimensions();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDistanceMetric();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getHnswConfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      vortex_api_v1_common_pb.HnswConfigParams.serializeBinaryToWriter
    );
  }
};


/**
 * optional string collection_name = 1;
 * @return {string}
 */
proto.vortex.api.v1.CreateCollectionRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vortex.api.v1.CreateCollectionRequest} returns this
 */
proto.vortex.api.v1.CreateCollectionRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 vector_dimensions = 2;
 * @return {number}
 */
proto.vortex.api.v1.CreateCollectionRequest.prototype.getVectorDimensions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vortex.api.v1.CreateCollectionRequest} returns this
 */
proto.vortex.api.v1.CreateCollectionRequest.prototype.setVectorDimensions = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional DistanceMetric distance_metric = 3;
 * @return {!proto.vortex.api.v1.DistanceMetric}
 */
proto.vortex.api.v1.CreateCollectionRequest.prototype.getDistanceMetric = function() {
  return /** @type {!proto.vortex.api.v1.DistanceMetric} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.vortex.api.v1.DistanceMetric} value
 * @return {!proto.vortex.api.v1.CreateCollectionRequest} returns this
 */
proto.vortex.api.v1.CreateCollectionRequest.prototype.setDistanceMetric = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional HnswConfigParams hnsw_config = 4;
 * @return {?proto.vortex.api.v1.HnswConfigParams}
 */
proto.vortex.api.v1.CreateCollectionRequest.prototype.getHnswConfig = function() {
  return /** @type{?proto.vortex.api.v1.HnswConfigParams} */ (
    jspb.Message.getWrapperField(this, vortex_api_v1_common_pb.HnswConfigParams, 4));
};


/**
 * @param {?proto.vortex.api.v1.HnswConfigParams|undefined} value
 * @return {!proto.vortex.api.v1.CreateCollectionRequest} returns this
*/
proto.vortex.api.v1.CreateCollectionRequest.prototype.setHnswConfig = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vortex.api.v1.CreateCollectionRequest} returns this
 */
proto.vortex.api.v1.CreateCollectionRequest.prototype.clearHnswConfig = function() {
  return this.setHnswConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vortex.api.v1.CreateCollectionRequest.prototype.hasHnswConfig = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.CreateCollectionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.CreateCollectionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.CreateCollectionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.CreateCollectionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.CreateCollectionResponse}
 */
proto.vortex.api.v1.CreateCollectionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.CreateCollectionResponse;
  return proto.vortex.api.v1.CreateCollectionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.CreateCollectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.CreateCollectionResponse}
 */
proto.vortex.api.v1.CreateCollectionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.CreateCollectionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.CreateCollectionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.CreateCollectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.CreateCollectionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.GetCollectionInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.GetCollectionInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.GetCollectionInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.GetCollectionInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.GetCollectionInfoRequest}
 */
proto.vortex.api.v1.GetCollectionInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.GetCollectionInfoRequest;
  return proto.vortex.api.v1.GetCollectionInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.GetCollectionInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.GetCollectionInfoRequest}
 */
proto.vortex.api.v1.GetCollectionInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.GetCollectionInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.GetCollectionInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.GetCollectionInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.GetCollectionInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string collection_name = 1;
 * @return {string}
 */
proto.vortex.api.v1.GetCollectionInfoRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vortex.api.v1.GetCollectionInfoRequest} returns this
 */
proto.vortex.api.v1.GetCollectionInfoRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.GetCollectionInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.GetCollectionInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.GetCollectionInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.GetCollectionInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    vectorCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    segmentCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    diskSizeBytes: jspb.Message.getFieldWithDefault(msg, 5, 0),
    ramFootprintBytes: jspb.Message.getFieldWithDefault(msg, 6, 0),
    config: (f = msg.getConfig()) && vortex_api_v1_common_pb.HnswConfigParams.toObject(includeInstance, f),
    distanceMetric: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.GetCollectionInfoResponse}
 */
proto.vortex.api.v1.GetCollectionInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.GetCollectionInfoResponse;
  return proto.vortex.api.v1.GetCollectionInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.GetCollectionInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.GetCollectionInfoResponse}
 */
proto.vortex.api.v1.GetCollectionInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 2:
      var value = /** @type {!proto.vortex.api.v1.CollectionStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVectorCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSegmentCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDiskSizeBytes(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRamFootprintBytes(value);
      break;
    case 7:
      var value = new vortex_api_v1_common_pb.HnswConfigParams;
      reader.readMessage(value,vortex_api_v1_common_pb.HnswConfigParams.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 8:
      var value = /** @type {!proto.vortex.api.v1.DistanceMetric} */ (reader.readEnum());
      msg.setDistanceMetric(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.GetCollectionInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.GetCollectionInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.GetCollectionInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.GetCollectionInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getVectorCount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSegmentCount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getDiskSizeBytes();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getRamFootprintBytes();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      vortex_api_v1_common_pb.HnswConfigParams.serializeBinaryToWriter
    );
  }
  f = message.getDistanceMetric();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * optional string collection_name = 1;
 * @return {string}
 */
proto.vortex.api.v1.GetCollectionInfoResponse.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vortex.api.v1.GetCollectionInfoResponse} returns this
 */
proto.vortex.api.v1.GetCollectionInfoResponse.prototype.setCollectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional CollectionStatus status = 2;
 * @return {!proto.vortex.api.v1.CollectionStatus}
 */
proto.vortex.api.v1.GetCollectionInfoResponse.prototype.getStatus = function() {
  return /** @type {!proto.vortex.api.v1.CollectionStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.vortex.api.v1.CollectionStatus} value
 * @return {!proto.vortex.api.v1.GetCollectionInfoResponse} returns this
 */
proto.vortex.api.v1.GetCollectionInfoResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint64 vector_count = 3;
 * @return {number}
 */
proto.vortex.api.v1.GetCollectionInfoResponse.prototype.getVectorCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.vortex.api.v1.GetCollectionInfoResponse} returns this
 */
proto.vortex.api.v1.GetCollectionInfoResponse.prototype.setVectorCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 segment_count = 4;
 * @return {number}
 */
proto.vortex.api.v1.GetCollectionInfoResponse.prototype.getSegmentCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.vortex.api.v1.GetCollectionInfoResponse} returns this
 */
proto.vortex.api.v1.GetCollectionInfoResponse.prototype.setSegmentCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 disk_size_bytes = 5;
 * @return {number}
 */
proto.vortex.api.v1.GetCollectionInfoResponse.prototype.getDiskSizeBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.vortex.api.v1.GetCollectionInfoResponse} returns this
 */
proto.vortex.api.v1.GetCollectionInfoResponse.prototype.setDiskSizeBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 ram_footprint_bytes = 6;
 * @return {number}
 */
proto.vortex.api.v1.GetCollectionInfoResponse.prototype.getRamFootprintBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.vortex.api.v1.GetCollectionInfoResponse} returns this
 */
proto.vortex.api.v1.GetCollectionInfoResponse.prototype.setRamFootprintBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional HnswConfigParams config = 7;
 * @return {?proto.vortex.api.v1.HnswConfigParams}
 */
proto.vortex.api.v1.GetCollectionInfoResponse.prototype.getConfig = function() {
  return /** @type{?proto.vortex.api.v1.HnswConfigParams} */ (
    jspb.Message.getWrapperField(this, vortex_api_v1_common_pb.HnswConfigParams, 7));
};


/**
 * @param {?proto.vortex.api.v1.HnswConfigParams|undefined} value
 * @return {!proto.vortex.api.v1.GetCollectionInfoResponse} returns this
*/
proto.vortex.api.v1.GetCollectionInfoResponse.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vortex.api.v1.GetCollectionInfoResponse} returns this
 */
proto.vortex.api.v1.GetCollectionInfoResponse.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vortex.api.v1.GetCollectionInfoResponse.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional DistanceMetric distance_metric = 8;
 * @return {!proto.vortex.api.v1.DistanceMetric}
 */
proto.vortex.api.v1.GetCollectionInfoResponse.prototype.getDistanceMetric = function() {
  return /** @type {!proto.vortex.api.v1.DistanceMetric} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.vortex.api.v1.DistanceMetric} value
 * @return {!proto.vortex.api.v1.GetCollectionInfoResponse} returns this
 */
proto.vortex.api.v1.GetCollectionInfoResponse.prototype.setDistanceMetric = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.ListCollectionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.ListCollectionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.ListCollectionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.ListCollectionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.ListCollectionsRequest}
 */
proto.vortex.api.v1.ListCollectionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.ListCollectionsRequest;
  return proto.vortex.api.v1.ListCollectionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.ListCollectionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.ListCollectionsRequest}
 */
proto.vortex.api.v1.ListCollectionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.ListCollectionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.ListCollectionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.ListCollectionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.ListCollectionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vortex.api.v1.ListCollectionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.ListCollectionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.ListCollectionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.ListCollectionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.ListCollectionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionsList: jspb.Message.toObjectList(msg.getCollectionsList(),
    proto.vortex.api.v1.CollectionDescription.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.ListCollectionsResponse}
 */
proto.vortex.api.v1.ListCollectionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.ListCollectionsResponse;
  return proto.vortex.api.v1.ListCollectionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.ListCollectionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.ListCollectionsResponse}
 */
proto.vortex.api.v1.ListCollectionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vortex.api.v1.CollectionDescription;
      reader.readMessage(value,proto.vortex.api.v1.CollectionDescription.deserializeBinaryFromReader);
      msg.addCollections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.ListCollectionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.ListCollectionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.ListCollectionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.ListCollectionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.vortex.api.v1.CollectionDescription.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CollectionDescription collections = 1;
 * @return {!Array<!proto.vortex.api.v1.CollectionDescription>}
 */
proto.vortex.api.v1.ListCollectionsResponse.prototype.getCollectionsList = function() {
  return /** @type{!Array<!proto.vortex.api.v1.CollectionDescription>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vortex.api.v1.CollectionDescription, 1));
};


/**
 * @param {!Array<!proto.vortex.api.v1.CollectionDescription>} value
 * @return {!proto.vortex.api.v1.ListCollectionsResponse} returns this
*/
proto.vortex.api.v1.ListCollectionsResponse.prototype.setCollectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vortex.api.v1.CollectionDescription=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vortex.api.v1.CollectionDescription}
 */
proto.vortex.api.v1.ListCollectionsResponse.prototype.addCollections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vortex.api.v1.CollectionDescription, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vortex.api.v1.ListCollectionsResponse} returns this
 */
proto.vortex.api.v1.ListCollectionsResponse.prototype.clearCollectionsList = function() {
  return this.setCollectionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.CollectionDescription.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.CollectionDescription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.CollectionDescription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.CollectionDescription.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vectorCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    dimensions: jspb.Message.getFieldWithDefault(msg, 4, 0),
    distanceMetric: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.CollectionDescription}
 */
proto.vortex.api.v1.CollectionDescription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.CollectionDescription;
  return proto.vortex.api.v1.CollectionDescription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.CollectionDescription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.CollectionDescription}
 */
proto.vortex.api.v1.CollectionDescription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVectorCount(value);
      break;
    case 3:
      var value = /** @type {!proto.vortex.api.v1.CollectionStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDimensions(value);
      break;
    case 5:
      var value = /** @type {!proto.vortex.api.v1.DistanceMetric} */ (reader.readEnum());
      msg.setDistanceMetric(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.CollectionDescription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.CollectionDescription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.CollectionDescription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.CollectionDescription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVectorCount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getDimensions();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getDistanceMetric();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.vortex.api.v1.CollectionDescription.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vortex.api.v1.CollectionDescription} returns this
 */
proto.vortex.api.v1.CollectionDescription.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 vector_count = 2;
 * @return {number}
 */
proto.vortex.api.v1.CollectionDescription.prototype.getVectorCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vortex.api.v1.CollectionDescription} returns this
 */
proto.vortex.api.v1.CollectionDescription.prototype.setVectorCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional CollectionStatus status = 3;
 * @return {!proto.vortex.api.v1.CollectionStatus}
 */
proto.vortex.api.v1.CollectionDescription.prototype.getStatus = function() {
  return /** @type {!proto.vortex.api.v1.CollectionStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.vortex.api.v1.CollectionStatus} value
 * @return {!proto.vortex.api.v1.CollectionDescription} returns this
 */
proto.vortex.api.v1.CollectionDescription.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint32 dimensions = 4;
 * @return {number}
 */
proto.vortex.api.v1.CollectionDescription.prototype.getDimensions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.vortex.api.v1.CollectionDescription} returns this
 */
proto.vortex.api.v1.CollectionDescription.prototype.setDimensions = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional DistanceMetric distance_metric = 5;
 * @return {!proto.vortex.api.v1.DistanceMetric}
 */
proto.vortex.api.v1.CollectionDescription.prototype.getDistanceMetric = function() {
  return /** @type {!proto.vortex.api.v1.DistanceMetric} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.vortex.api.v1.DistanceMetric} value
 * @return {!proto.vortex.api.v1.CollectionDescription} returns this
 */
proto.vortex.api.v1.CollectionDescription.prototype.setDistanceMetric = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.DeleteCollectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.DeleteCollectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.DeleteCollectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.DeleteCollectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.DeleteCollectionRequest}
 */
proto.vortex.api.v1.DeleteCollectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.DeleteCollectionRequest;
  return proto.vortex.api.v1.DeleteCollectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.DeleteCollectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.DeleteCollectionRequest}
 */
proto.vortex.api.v1.DeleteCollectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.DeleteCollectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.DeleteCollectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.DeleteCollectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.DeleteCollectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string collection_name = 1;
 * @return {string}
 */
proto.vortex.api.v1.DeleteCollectionRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vortex.api.v1.DeleteCollectionRequest} returns this
 */
proto.vortex.api.v1.DeleteCollectionRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.DeleteCollectionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.DeleteCollectionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.DeleteCollectionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.DeleteCollectionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.DeleteCollectionResponse}
 */
proto.vortex.api.v1.DeleteCollectionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.DeleteCollectionResponse;
  return proto.vortex.api.v1.DeleteCollectionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.DeleteCollectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.DeleteCollectionResponse}
 */
proto.vortex.api.v1.DeleteCollectionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.DeleteCollectionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.DeleteCollectionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.DeleteCollectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.DeleteCollectionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.vortex.api.v1.CollectionStatus = {
  COLLECTION_STATUS_UNSPECIFIED: 0,
  GREEN: 1,
  YELLOW: 2,
  RED: 3,
  OPTIMIZING: 4,
  CREATING: 5
};

goog.object.extend(exports, proto.vortex.api.v1);
