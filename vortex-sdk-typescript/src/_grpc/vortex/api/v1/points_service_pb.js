// source: vortex/api/v1/points_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var vortex_api_v1_common_pb = require('../../../vortex/api/v1/common_pb.js');
goog.object.extend(proto, vortex_api_v1_common_pb);
goog.exportSymbol('proto.vortex.api.v1.DeletePointsRequest', null, global);
goog.exportSymbol('proto.vortex.api.v1.DeletePointsResponse', null, global);
goog.exportSymbol('proto.vortex.api.v1.GetPointsRequest', null, global);
goog.exportSymbol('proto.vortex.api.v1.GetPointsResponse', null, global);
goog.exportSymbol('proto.vortex.api.v1.SearchPointsRequest', null, global);
goog.exportSymbol('proto.vortex.api.v1.SearchPointsResponse', null, global);
goog.exportSymbol('proto.vortex.api.v1.UpsertPointsRequest', null, global);
goog.exportSymbol('proto.vortex.api.v1.UpsertPointsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.UpsertPointsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vortex.api.v1.UpsertPointsRequest.repeatedFields_, null);
};
goog.inherits(proto.vortex.api.v1.UpsertPointsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.UpsertPointsRequest.displayName = 'proto.vortex.api.v1.UpsertPointsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.UpsertPointsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vortex.api.v1.UpsertPointsResponse.repeatedFields_, null);
};
goog.inherits(proto.vortex.api.v1.UpsertPointsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.UpsertPointsResponse.displayName = 'proto.vortex.api.v1.UpsertPointsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.GetPointsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vortex.api.v1.GetPointsRequest.repeatedFields_, null);
};
goog.inherits(proto.vortex.api.v1.GetPointsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.GetPointsRequest.displayName = 'proto.vortex.api.v1.GetPointsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.GetPointsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vortex.api.v1.GetPointsResponse.repeatedFields_, null);
};
goog.inherits(proto.vortex.api.v1.GetPointsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.GetPointsResponse.displayName = 'proto.vortex.api.v1.GetPointsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.DeletePointsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vortex.api.v1.DeletePointsRequest.repeatedFields_, null);
};
goog.inherits(proto.vortex.api.v1.DeletePointsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.DeletePointsRequest.displayName = 'proto.vortex.api.v1.DeletePointsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.DeletePointsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vortex.api.v1.DeletePointsResponse.repeatedFields_, null);
};
goog.inherits(proto.vortex.api.v1.DeletePointsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.DeletePointsResponse.displayName = 'proto.vortex.api.v1.DeletePointsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.SearchPointsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vortex.api.v1.SearchPointsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.SearchPointsRequest.displayName = 'proto.vortex.api.v1.SearchPointsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vortex.api.v1.SearchPointsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vortex.api.v1.SearchPointsResponse.repeatedFields_, null);
};
goog.inherits(proto.vortex.api.v1.SearchPointsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vortex.api.v1.SearchPointsResponse.displayName = 'proto.vortex.api.v1.SearchPointsResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vortex.api.v1.UpsertPointsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.UpsertPointsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.UpsertPointsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.UpsertPointsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.UpsertPointsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    vortex_api_v1_common_pb.PointStruct.toObject, includeInstance),
    waitFlush: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.UpsertPointsRequest}
 */
proto.vortex.api.v1.UpsertPointsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.UpsertPointsRequest;
  return proto.vortex.api.v1.UpsertPointsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.UpsertPointsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.UpsertPointsRequest}
 */
proto.vortex.api.v1.UpsertPointsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 2:
      var value = new vortex_api_v1_common_pb.PointStruct;
      reader.readMessage(value,vortex_api_v1_common_pb.PointStruct.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWaitFlush(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.UpsertPointsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.UpsertPointsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.UpsertPointsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.UpsertPointsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      vortex_api_v1_common_pb.PointStruct.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string collection_name = 1;
 * @return {string}
 */
proto.vortex.api.v1.UpsertPointsRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vortex.api.v1.UpsertPointsRequest} returns this
 */
proto.vortex.api.v1.UpsertPointsRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated PointStruct points = 2;
 * @return {!Array<!proto.vortex.api.v1.PointStruct>}
 */
proto.vortex.api.v1.UpsertPointsRequest.prototype.getPointsList = function() {
  return /** @type{!Array<!proto.vortex.api.v1.PointStruct>} */ (
    jspb.Message.getRepeatedWrapperField(this, vortex_api_v1_common_pb.PointStruct, 2));
};


/**
 * @param {!Array<!proto.vortex.api.v1.PointStruct>} value
 * @return {!proto.vortex.api.v1.UpsertPointsRequest} returns this
*/
proto.vortex.api.v1.UpsertPointsRequest.prototype.setPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.vortex.api.v1.PointStruct=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vortex.api.v1.PointStruct}
 */
proto.vortex.api.v1.UpsertPointsRequest.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.vortex.api.v1.PointStruct, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vortex.api.v1.UpsertPointsRequest} returns this
 */
proto.vortex.api.v1.UpsertPointsRequest.prototype.clearPointsList = function() {
  return this.setPointsList([]);
};


/**
 * optional bool wait_flush = 3;
 * @return {boolean}
 */
proto.vortex.api.v1.UpsertPointsRequest.prototype.getWaitFlush = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.vortex.api.v1.UpsertPointsRequest} returns this
 */
proto.vortex.api.v1.UpsertPointsRequest.prototype.setWaitFlush = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vortex.api.v1.UpsertPointsRequest} returns this
 */
proto.vortex.api.v1.UpsertPointsRequest.prototype.clearWaitFlush = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vortex.api.v1.UpsertPointsRequest.prototype.hasWaitFlush = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vortex.api.v1.UpsertPointsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.UpsertPointsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.UpsertPointsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.UpsertPointsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.UpsertPointsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusesList: jspb.Message.toObjectList(msg.getStatusesList(),
    vortex_api_v1_common_pb.PointOperationStatus.toObject, includeInstance),
    overallError: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.UpsertPointsResponse}
 */
proto.vortex.api.v1.UpsertPointsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.UpsertPointsResponse;
  return proto.vortex.api.v1.UpsertPointsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.UpsertPointsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.UpsertPointsResponse}
 */
proto.vortex.api.v1.UpsertPointsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vortex_api_v1_common_pb.PointOperationStatus;
      reader.readMessage(value,vortex_api_v1_common_pb.PointOperationStatus.deserializeBinaryFromReader);
      msg.addStatuses(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOverallError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.UpsertPointsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.UpsertPointsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.UpsertPointsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.UpsertPointsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      vortex_api_v1_common_pb.PointOperationStatus.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated PointOperationStatus statuses = 1;
 * @return {!Array<!proto.vortex.api.v1.PointOperationStatus>}
 */
proto.vortex.api.v1.UpsertPointsResponse.prototype.getStatusesList = function() {
  return /** @type{!Array<!proto.vortex.api.v1.PointOperationStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, vortex_api_v1_common_pb.PointOperationStatus, 1));
};


/**
 * @param {!Array<!proto.vortex.api.v1.PointOperationStatus>} value
 * @return {!proto.vortex.api.v1.UpsertPointsResponse} returns this
*/
proto.vortex.api.v1.UpsertPointsResponse.prototype.setStatusesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vortex.api.v1.PointOperationStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vortex.api.v1.PointOperationStatus}
 */
proto.vortex.api.v1.UpsertPointsResponse.prototype.addStatuses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vortex.api.v1.PointOperationStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vortex.api.v1.UpsertPointsResponse} returns this
 */
proto.vortex.api.v1.UpsertPointsResponse.prototype.clearStatusesList = function() {
  return this.setStatusesList([]);
};


/**
 * optional string overall_error = 2;
 * @return {string}
 */
proto.vortex.api.v1.UpsertPointsResponse.prototype.getOverallError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vortex.api.v1.UpsertPointsResponse} returns this
 */
proto.vortex.api.v1.UpsertPointsResponse.prototype.setOverallError = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vortex.api.v1.UpsertPointsResponse} returns this
 */
proto.vortex.api.v1.UpsertPointsResponse.prototype.clearOverallError = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vortex.api.v1.UpsertPointsResponse.prototype.hasOverallError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vortex.api.v1.GetPointsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.GetPointsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.GetPointsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.GetPointsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.GetPointsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    idsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    withPayload: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    withVector: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.GetPointsRequest}
 */
proto.vortex.api.v1.GetPointsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.GetPointsRequest;
  return proto.vortex.api.v1.GetPointsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.GetPointsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.GetPointsRequest}
 */
proto.vortex.api.v1.GetPointsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addIds(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithPayload(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithVector(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.GetPointsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.GetPointsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.GetPointsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.GetPointsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string collection_name = 1;
 * @return {string}
 */
proto.vortex.api.v1.GetPointsRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vortex.api.v1.GetPointsRequest} returns this
 */
proto.vortex.api.v1.GetPointsRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string ids = 2;
 * @return {!Array<string>}
 */
proto.vortex.api.v1.GetPointsRequest.prototype.getIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.vortex.api.v1.GetPointsRequest} returns this
 */
proto.vortex.api.v1.GetPointsRequest.prototype.setIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.vortex.api.v1.GetPointsRequest} returns this
 */
proto.vortex.api.v1.GetPointsRequest.prototype.addIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vortex.api.v1.GetPointsRequest} returns this
 */
proto.vortex.api.v1.GetPointsRequest.prototype.clearIdsList = function() {
  return this.setIdsList([]);
};


/**
 * optional bool with_payload = 3;
 * @return {boolean}
 */
proto.vortex.api.v1.GetPointsRequest.prototype.getWithPayload = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.vortex.api.v1.GetPointsRequest} returns this
 */
proto.vortex.api.v1.GetPointsRequest.prototype.setWithPayload = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vortex.api.v1.GetPointsRequest} returns this
 */
proto.vortex.api.v1.GetPointsRequest.prototype.clearWithPayload = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vortex.api.v1.GetPointsRequest.prototype.hasWithPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool with_vector = 4;
 * @return {boolean}
 */
proto.vortex.api.v1.GetPointsRequest.prototype.getWithVector = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.vortex.api.v1.GetPointsRequest} returns this
 */
proto.vortex.api.v1.GetPointsRequest.prototype.setWithVector = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vortex.api.v1.GetPointsRequest} returns this
 */
proto.vortex.api.v1.GetPointsRequest.prototype.clearWithVector = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vortex.api.v1.GetPointsRequest.prototype.hasWithVector = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vortex.api.v1.GetPointsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.GetPointsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.GetPointsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.GetPointsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.GetPointsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    vortex_api_v1_common_pb.PointStruct.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.GetPointsResponse}
 */
proto.vortex.api.v1.GetPointsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.GetPointsResponse;
  return proto.vortex.api.v1.GetPointsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.GetPointsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.GetPointsResponse}
 */
proto.vortex.api.v1.GetPointsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vortex_api_v1_common_pb.PointStruct;
      reader.readMessage(value,vortex_api_v1_common_pb.PointStruct.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.GetPointsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.GetPointsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.GetPointsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.GetPointsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      vortex_api_v1_common_pb.PointStruct.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PointStruct points = 1;
 * @return {!Array<!proto.vortex.api.v1.PointStruct>}
 */
proto.vortex.api.v1.GetPointsResponse.prototype.getPointsList = function() {
  return /** @type{!Array<!proto.vortex.api.v1.PointStruct>} */ (
    jspb.Message.getRepeatedWrapperField(this, vortex_api_v1_common_pb.PointStruct, 1));
};


/**
 * @param {!Array<!proto.vortex.api.v1.PointStruct>} value
 * @return {!proto.vortex.api.v1.GetPointsResponse} returns this
*/
proto.vortex.api.v1.GetPointsResponse.prototype.setPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vortex.api.v1.PointStruct=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vortex.api.v1.PointStruct}
 */
proto.vortex.api.v1.GetPointsResponse.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vortex.api.v1.PointStruct, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vortex.api.v1.GetPointsResponse} returns this
 */
proto.vortex.api.v1.GetPointsResponse.prototype.clearPointsList = function() {
  return this.setPointsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vortex.api.v1.DeletePointsRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.DeletePointsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.DeletePointsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.DeletePointsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.DeletePointsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    idsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    waitFlush: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.DeletePointsRequest}
 */
proto.vortex.api.v1.DeletePointsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.DeletePointsRequest;
  return proto.vortex.api.v1.DeletePointsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.DeletePointsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.DeletePointsRequest}
 */
proto.vortex.api.v1.DeletePointsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addIds(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWaitFlush(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.DeletePointsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.DeletePointsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.DeletePointsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.DeletePointsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string collection_name = 1;
 * @return {string}
 */
proto.vortex.api.v1.DeletePointsRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vortex.api.v1.DeletePointsRequest} returns this
 */
proto.vortex.api.v1.DeletePointsRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string ids = 2;
 * @return {!Array<string>}
 */
proto.vortex.api.v1.DeletePointsRequest.prototype.getIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.vortex.api.v1.DeletePointsRequest} returns this
 */
proto.vortex.api.v1.DeletePointsRequest.prototype.setIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.vortex.api.v1.DeletePointsRequest} returns this
 */
proto.vortex.api.v1.DeletePointsRequest.prototype.addIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vortex.api.v1.DeletePointsRequest} returns this
 */
proto.vortex.api.v1.DeletePointsRequest.prototype.clearIdsList = function() {
  return this.setIdsList([]);
};


/**
 * optional bool wait_flush = 3;
 * @return {boolean}
 */
proto.vortex.api.v1.DeletePointsRequest.prototype.getWaitFlush = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.vortex.api.v1.DeletePointsRequest} returns this
 */
proto.vortex.api.v1.DeletePointsRequest.prototype.setWaitFlush = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vortex.api.v1.DeletePointsRequest} returns this
 */
proto.vortex.api.v1.DeletePointsRequest.prototype.clearWaitFlush = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vortex.api.v1.DeletePointsRequest.prototype.hasWaitFlush = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vortex.api.v1.DeletePointsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.DeletePointsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.DeletePointsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.DeletePointsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.DeletePointsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusesList: jspb.Message.toObjectList(msg.getStatusesList(),
    vortex_api_v1_common_pb.PointOperationStatus.toObject, includeInstance),
    overallError: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.DeletePointsResponse}
 */
proto.vortex.api.v1.DeletePointsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.DeletePointsResponse;
  return proto.vortex.api.v1.DeletePointsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.DeletePointsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.DeletePointsResponse}
 */
proto.vortex.api.v1.DeletePointsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vortex_api_v1_common_pb.PointOperationStatus;
      reader.readMessage(value,vortex_api_v1_common_pb.PointOperationStatus.deserializeBinaryFromReader);
      msg.addStatuses(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOverallError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.DeletePointsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.DeletePointsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.DeletePointsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.DeletePointsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      vortex_api_v1_common_pb.PointOperationStatus.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated PointOperationStatus statuses = 1;
 * @return {!Array<!proto.vortex.api.v1.PointOperationStatus>}
 */
proto.vortex.api.v1.DeletePointsResponse.prototype.getStatusesList = function() {
  return /** @type{!Array<!proto.vortex.api.v1.PointOperationStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, vortex_api_v1_common_pb.PointOperationStatus, 1));
};


/**
 * @param {!Array<!proto.vortex.api.v1.PointOperationStatus>} value
 * @return {!proto.vortex.api.v1.DeletePointsResponse} returns this
*/
proto.vortex.api.v1.DeletePointsResponse.prototype.setStatusesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vortex.api.v1.PointOperationStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vortex.api.v1.PointOperationStatus}
 */
proto.vortex.api.v1.DeletePointsResponse.prototype.addStatuses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vortex.api.v1.PointOperationStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vortex.api.v1.DeletePointsResponse} returns this
 */
proto.vortex.api.v1.DeletePointsResponse.prototype.clearStatusesList = function() {
  return this.setStatusesList([]);
};


/**
 * optional string overall_error = 2;
 * @return {string}
 */
proto.vortex.api.v1.DeletePointsResponse.prototype.getOverallError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vortex.api.v1.DeletePointsResponse} returns this
 */
proto.vortex.api.v1.DeletePointsResponse.prototype.setOverallError = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vortex.api.v1.DeletePointsResponse} returns this
 */
proto.vortex.api.v1.DeletePointsResponse.prototype.clearOverallError = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vortex.api.v1.DeletePointsResponse.prototype.hasOverallError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.SearchPointsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.SearchPointsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.SearchPointsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    queryVector: (f = msg.getQueryVector()) && vortex_api_v1_common_pb.Vector.toObject(includeInstance, f),
    kLimit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    filter: (f = msg.getFilter()) && vortex_api_v1_common_pb.Filter.toObject(includeInstance, f),
    withPayload: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    withVector: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    params: (f = msg.getParams()) && vortex_api_v1_common_pb.SearchParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.SearchPointsRequest}
 */
proto.vortex.api.v1.SearchPointsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.SearchPointsRequest;
  return proto.vortex.api.v1.SearchPointsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.SearchPointsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.SearchPointsRequest}
 */
proto.vortex.api.v1.SearchPointsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 2:
      var value = new vortex_api_v1_common_pb.Vector;
      reader.readMessage(value,vortex_api_v1_common_pb.Vector.deserializeBinaryFromReader);
      msg.setQueryVector(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKLimit(value);
      break;
    case 4:
      var value = new vortex_api_v1_common_pb.Filter;
      reader.readMessage(value,vortex_api_v1_common_pb.Filter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithPayload(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWithVector(value);
      break;
    case 7:
      var value = new vortex_api_v1_common_pb.SearchParams;
      reader.readMessage(value,vortex_api_v1_common_pb.SearchParams.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.SearchPointsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.SearchPointsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.SearchPointsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQueryVector();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      vortex_api_v1_common_pb.Vector.serializeBinaryToWriter
    );
  }
  f = message.getKLimit();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      vortex_api_v1_common_pb.Filter.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      vortex_api_v1_common_pb.SearchParams.serializeBinaryToWriter
    );
  }
};


/**
 * optional string collection_name = 1;
 * @return {string}
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vortex.api.v1.SearchPointsRequest} returns this
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Vector query_vector = 2;
 * @return {?proto.vortex.api.v1.Vector}
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.getQueryVector = function() {
  return /** @type{?proto.vortex.api.v1.Vector} */ (
    jspb.Message.getWrapperField(this, vortex_api_v1_common_pb.Vector, 2));
};


/**
 * @param {?proto.vortex.api.v1.Vector|undefined} value
 * @return {!proto.vortex.api.v1.SearchPointsRequest} returns this
*/
proto.vortex.api.v1.SearchPointsRequest.prototype.setQueryVector = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vortex.api.v1.SearchPointsRequest} returns this
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.clearQueryVector = function() {
  return this.setQueryVector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.hasQueryVector = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 k_limit = 3;
 * @return {number}
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.getKLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.vortex.api.v1.SearchPointsRequest} returns this
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.setKLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Filter filter = 4;
 * @return {?proto.vortex.api.v1.Filter}
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.getFilter = function() {
  return /** @type{?proto.vortex.api.v1.Filter} */ (
    jspb.Message.getWrapperField(this, vortex_api_v1_common_pb.Filter, 4));
};


/**
 * @param {?proto.vortex.api.v1.Filter|undefined} value
 * @return {!proto.vortex.api.v1.SearchPointsRequest} returns this
*/
proto.vortex.api.v1.SearchPointsRequest.prototype.setFilter = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vortex.api.v1.SearchPointsRequest} returns this
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.clearFilter = function() {
  return this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool with_payload = 5;
 * @return {boolean}
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.getWithPayload = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.vortex.api.v1.SearchPointsRequest} returns this
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.setWithPayload = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vortex.api.v1.SearchPointsRequest} returns this
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.clearWithPayload = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.hasWithPayload = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool with_vector = 6;
 * @return {boolean}
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.getWithVector = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.vortex.api.v1.SearchPointsRequest} returns this
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.setWithVector = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.vortex.api.v1.SearchPointsRequest} returns this
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.clearWithVector = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.hasWithVector = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SearchParams params = 7;
 * @return {?proto.vortex.api.v1.SearchParams}
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.getParams = function() {
  return /** @type{?proto.vortex.api.v1.SearchParams} */ (
    jspb.Message.getWrapperField(this, vortex_api_v1_common_pb.SearchParams, 7));
};


/**
 * @param {?proto.vortex.api.v1.SearchParams|undefined} value
 * @return {!proto.vortex.api.v1.SearchPointsRequest} returns this
*/
proto.vortex.api.v1.SearchPointsRequest.prototype.setParams = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vortex.api.v1.SearchPointsRequest} returns this
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.clearParams = function() {
  return this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vortex.api.v1.SearchPointsRequest.prototype.hasParams = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vortex.api.v1.SearchPointsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vortex.api.v1.SearchPointsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vortex.api.v1.SearchPointsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vortex.api.v1.SearchPointsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.SearchPointsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    vortex_api_v1_common_pb.ScoredPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vortex.api.v1.SearchPointsResponse}
 */
proto.vortex.api.v1.SearchPointsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vortex.api.v1.SearchPointsResponse;
  return proto.vortex.api.v1.SearchPointsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vortex.api.v1.SearchPointsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vortex.api.v1.SearchPointsResponse}
 */
proto.vortex.api.v1.SearchPointsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vortex_api_v1_common_pb.ScoredPoint;
      reader.readMessage(value,vortex_api_v1_common_pb.ScoredPoint.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vortex.api.v1.SearchPointsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vortex.api.v1.SearchPointsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vortex.api.v1.SearchPointsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vortex.api.v1.SearchPointsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      vortex_api_v1_common_pb.ScoredPoint.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ScoredPoint results = 1;
 * @return {!Array<!proto.vortex.api.v1.ScoredPoint>}
 */
proto.vortex.api.v1.SearchPointsResponse.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.vortex.api.v1.ScoredPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, vortex_api_v1_common_pb.ScoredPoint, 1));
};


/**
 * @param {!Array<!proto.vortex.api.v1.ScoredPoint>} value
 * @return {!proto.vortex.api.v1.SearchPointsResponse} returns this
*/
proto.vortex.api.v1.SearchPointsResponse.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vortex.api.v1.ScoredPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vortex.api.v1.ScoredPoint}
 */
proto.vortex.api.v1.SearchPointsResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vortex.api.v1.ScoredPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vortex.api.v1.SearchPointsResponse} returns this
 */
proto.vortex.api.v1.SearchPointsResponse.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


goog.object.extend(exports, proto.vortex.api.v1);
